#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import pickle
import sys

import numpy as np

def main():
    parser = argparse.ArgumentParser(
        description='check if CROWN verifies given alpha',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('crown_path')
    parser.add_argument('model', help='.npy model generated by mat2npy.py')
    parser.add_argument('inputs', help='input files generated by model2chk.py',
                        nargs='+')
    args = parser.parse_args()

    sys.path.append(args.crown_path)
    from get_bounds_ours import compute_worst_bound, get_weights_list
    import save_nlayer_weights as nl

    model = nl.NLayerModel(None, args.model, activation='relu')

    for inp_name in args.inputs:
        with open(inp_name, 'rb') as fin:
            rec = pickle.load(fin)

        orig_inp = rec['input']
        orig_inp = np.transpose(orig_inp, (1, 2, 0))
        pred = np.squeeze(model.model.predict(orig_inp[None]), 0)

        assert np.argmax(pred) == rec['label']
        weights, biases = get_weights_list(model)

        def get_bound(inp):
            gap_gx, g_x0, max_grad_norm = compute_worst_bound(
                weights, biases, rec['label'], rec['label'],
                inp, pred, None, eps=rec['eps'], untargeted=True
            )
            return gap_gx

        b0 = get_bound(orig_inp)
        b1 = get_bound(orig_inp * rec['alpha'])
        print('file={} label={} gap0={} gap1={}'.format(
            inp_name, rec['label'], b0, b1))

if __name__ == '__main__':
    main()
